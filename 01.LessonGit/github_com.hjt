<TreePad version 7.0>

<bmarks>
<end bmarks> 5P9i0s8y19Z


<options>
icontransp=0
<end options> 5P9i0s8y19Z

<scrpbk>

<end scrpbk> 5P9i0s8y19Z
id=3530
nodeguid=2365DAC2232CCF19D490517DE8DC086790856996
dtch=20170203-111855
usrch=IPA
dtcr=20170201-183715
usrcr=IPA
dt=RTF
obj=E3FE12BA4F2EAB0E05F54F106057F48509D4159F.bmp
obj=
<node>
github.com
0
{\rtf1\ansi\deff0\deftab850{\fonttbl{\f0\fnil\fcharset204 microsoft sans serif;}{\f1\fnil\fcharset204 microsoft sans serif;}{\f2\fnil\fcharset2 symbol;}{\f3\fnil\fcharset2 WingDings;}}{\colortbl\red0\green0\blue0;\red255\green0\blue0;\red0\green128\blue0;\red0\green0\blue255;\red255\green255\blue0;\red255\green0\blue255;\red128\green0\blue128;\red128\green0\blue0;\red0\green255\blue0;\red0\green255\blue255;\red0\green128\blue128;\red0\green0\blue128;\red255\green255\blue255;\red192\green192\blue192;\red128\green128\blue128;\red0\green0\blue0;\red255\green128\blue128;}\wptoolsver4\wpprheadfoot0\paperw11906\paperh16838\margl737\margr737\margt850\margb850\headery720\footery720{\*\listtable{\list\listtemplateid19690212{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc1{\leveltext\'02\'00.;}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc3{\leveltext\'02\'01.;}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'02\'02.;}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc4{\leveltext\'02\'03);}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc2{\leveltext\'02\'04);}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc4{\leveltext\'02\'05);}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'02\'06);}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'02\'07);}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'02\'08);}{\levelnumbers\'01;}}
\listid1194737}}{\*\listoverridetable{\listoverride\listid1194737\listoverridecount0\ls1}}\endnhere\sectdefaultcl{\pard{\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0 VasMark\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0\uldb vas.mark@i.ua\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0\cb16\uldb vas.mark@gmail.com\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0\cb16 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0\cb12\uldb Fingerprint: c6:f5:b5:3f:44:a4:9e:f4:a1:50:75:18:58:06:82:54\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0\cb12 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0\cb12\uldb {\*\wptools{110e0a005457504f496d6167650054504630095457504f496d61676500075769647468545703d31d084865696768745457038304074f626a4e616d65062c453346453132424134463245414230453035463534463130363035374634383530394434313539462e626d70064f626a54616702000c57726974655254464d6f64650707776f62426f74680a53747265616d4e616d65062c453346453132424134463245414230453035463534463130363035374634383530394434313539462e626d700b5472616e73706172656e7408105472616e73706172656e74436f6c6f720707636c426c61636b000000000000}}{\field{\*\fldinst{INCLUDEPICTURE "E3FE12BA4F2EAB0E05F54F106057F48509D4159F.bmp" MERGEFORMAT}}}\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0\cb12 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0\cb12\uldb {\*\wptools{110e0d005457504f486f727a4c696e6500545046300c5457504f486f727a4c696e65000354616702010c55736550616765576964746809075769647468545703b6280848656967687454570214064f626a54616702000c57726974655254464d6f6465070f776f624f6e6c795374616e6461726400003f3f3f00}}\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0\cb12 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f1\fs20\cf0\cb12 }}
}
<end node> 5P9i0s8y19Z
id=3532
nodeguid=E1A5287EA8833BE17B12E39A150864CDC37C5B1C
dtch=20170203-090610
usrch=IPA
dtcr=20170203-071130
usrcr=IPA
dt=Text
<node>
01. Preparation
1
1. Preparation
Goals
To be fully prepared to work with Git.

01 Setting up name and e-mail address
If you've never used git before, first you need to set up your name and e-mail. Run the following commands to let git know your name and e-mail address. If git is already installed, skip down to the end of the line.

RUN:
git config --global user.name "Your Name"
git config --global user.email "your_email@whatever.com"

02 Installation Options line endings
Also, for users of Unix/Mac:

RUN:
git config --global core.autocrlf input
git config --global core.safecrlf true
For Windows users:

RUN:
git config --global core.autocrlf true
git config --global core.safecrlf true


<end node> 5P9i0s8y19Z
id=3534
nodeguid=E324BCED8EE9B57CA9DF22DFEB95A6459FAF32C4
dtch=20170203-091147
usrch=IPA
dtcr=20170203-084049
usrcr=IPA
dt=Text
<node>
02. «амена LF на CRLF
1
«амена LF на CRLF

Published: 22.04.2011

ѕри добавлении проекта в git-репозиторий, последний заругалс€ на файл reset.css, вз€тый мной где-то на бескрайних просторах интернета: fatal: LF would be replaced by CRLF in ...

Ќе устроило его, что переносы строк были в Unix-формате, так как дело происходило под Windows. ќчень просто конвертировать переносы строк в Windows-формат помогает текстовый редактор Notepad++: ѕравка>EOL конверси€>ѕреобразовать в WIN-формат.

Ќасчет git-репозитори€: хорошо, если это был один файл, но что делать, если файлов много, и они вперемешку, unix и win? —амое простое, что можно сделать - отключить проверку формата:

$ git config --global core.autocrlf false
$ git config --global core.safecrlf false

<end node> 5P9i0s8y19Z
id=3533
nodeguid=277DFF54A75A7AF6226C20E40C88540E26B81E09
dtch=20170203-091450
usrch=IPA
dtcr=20170203-071316
usrcr=IPA
dt=Text
<node>
03. Creating a Project
1
3. Creating a Project
Goals
To learn how to create a git repository from scratch.

01 Create a УHello, WorldФ page
Get started in an empty working directory (for example, Work, if you downloaded the file from the previous step) and create an empty directory named УhelloФ, then create a hello.html file in it with the following contents.

RUN:
mkdir hello
cd hello
touch hello.html
FILE: HELLO.HTML
Hello, World

02 Create a repository
So you have a directory that contains one file. Run the git init in order to create a git repo from that directory.

RUN:
git init
RESULT:
$ git init
Initialized empty Git repository in /Users/alex/Documents/Presentations/githowto/auto/hello/.git/

03 Add the page to the repository
Now letТs add the УHello, WorldФ page to the repository.

RUN:
git add hello.html
git commit -m "First Commit"
You will see Е

RESULT:
$ git add hello.html
$ git commit -m "First Commit"
[master (root-commit) 911e8c9] First Commit
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 hello.html

<end node> 5P9i0s8y19Z
id=3535
nodeguid=4FE37B5F4BA2F8C58C72C42A3447E5F43A36E1FC
dtch=20170203-090555
usrch=IPA
dtcr=20170203-090153
usrcr=IPA
dt=Text
<node>
04. Checking the status
1
4. Checking the status of the repository
Goals
To learn how to check the repositoryТs status
01 Check the status of the repository
Use the git status command, to check the current state of the repository.

RUN:
git status
You will see

RESULT:
$ git status
# On branch master
nothing to commit (working directory clean)
The command checks the status and reports that thereТs nothing to commit, meaning the repository stores the current state of the working directory, and there are no changes to record.

We will use the git status, to keep monitoring the states of both the working directory and the repository.


<end node> 5P9i0s8y19Z
id=3536
nodeguid=B28F20A3A678906D7A131BEA51050DE88CACA58E
dtch=20170203-092835
usrch=IPA
dtcr=20170203-090512
usrcr=IPA
dt=RTF
<node>
05. Making changes
1
{\rtf1\ansi\deff0\deftab850{\fonttbl{\f0\fnil\fcharset204 microsoft sans serif;}{\f1\fnil\fcharset2 symbol;}{\f2\fnil\fcharset2 WingDings;}}{\colortbl\red0\green0\blue0;\red255\green0\blue0;\red0\green128\blue0;\red0\green0\blue255;\red255\green255\blue0;\red255\green0\blue255;\red128\green0\blue128;\red128\green0\blue0;\red0\green255\blue0;\red0\green255\blue255;\red0\green128\blue128;\red0\green0\blue128;\red255\green255\blue255;\red192\green192\blue192;\red128\green128\blue128;\red0\green0\blue0;}\wptoolsver4\wpprheadfoot0\paperw11906\paperh16838\margl737\margr737\margt850\margb850\headery720\footery720{\*\listtable{\list\listtemplateid19690212{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc1{\leveltext\'02\'00.;}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc3{\leveltext\'02\'01.;}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'02\'02.;}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc4{\leveltext\'02\'03);}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc2{\leveltext\'03(\'04);}{\levelnumbers\'02;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc4{\leveltext\'03(\'05);}{\levelnumbers\'02;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'03(\'06);}{\levelnumbers\'02;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'03(\'07);}{\levelnumbers\'02;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'03(\'08);}{\levelnumbers\'02;}}
\listid1194737}}{\*\listoverridetable{\listoverride\listid1194737\listoverridecount0\ls1}}\endnhere\sectdefaultcl{\pard{\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 5. Making changes\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 Goals\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 To learn to monitor the working directory\'92s state\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 01 Changing the \'93Hello, World\'94 page\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 Let\'92s add some HTML-tags to our greeting. Change the file contents to:\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 FILE: HELLO.HTML\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 <h1>Hello, World!</h1>\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 02 Checking the status\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 Check the working directory\'92s status.\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 RUN:\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 git status\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 You will see \'85\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 RESULT:\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 $ git status\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 # On branch master\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 # Changes not staged for commit:\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 #   (use "git add <file>..." to update what will be committed)\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 #   (use "git checkout -- <file>..." to discard changes in working directory)\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 #\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 #   modified:   hello.html\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 #\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 no changes added to commit (use "git add" and/or "git commit -a")\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 The first important aspect here is that git knows hello.html file has been changed, but these changes are not yet committed to the repository.\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 Another aspect is that the status message hints about what to do next. If you want to add these changes to the repository, use \plain\f0\fs20\cf0\b git add\plain\f0\fs20\cf0 . To undo the changes use \plain\f0\fs20\cf0\b git\plain\f0\fs20\cf0  \plain\f0\fs20\cf0\b checkout\plain\f0\fs20\cf0 .}}
}
<end node> 5P9i0s8y19Z
id=3537
nodeguid=157D833D453ABEE31E25428E8B9672EACFB7CFC0
dtch=20170203-092904
usrch=IPA
dtcr=20170203-091704
usrcr=IPA
dt=RTF
<node>
06. Staging the changes
1
{\rtf1\ansi\deff0\deftab850{\fonttbl{\f0\fnil\fcharset204 microsoft sans serif;}{\f1\fnil\fcharset2 symbol;}{\f2\fnil\fcharset2 WingDings;}}{\colortbl\red0\green0\blue0;\red255\green0\blue0;\red0\green128\blue0;\red0\green0\blue255;\red255\green255\blue0;\red255\green0\blue255;\red128\green0\blue128;\red128\green0\blue0;\red0\green255\blue0;\red0\green255\blue255;\red0\green128\blue128;\red0\green0\blue128;\red255\green255\blue255;\red192\green192\blue192;\red128\green128\blue128;\red0\green0\blue0;}\wptoolsver4\wpprheadfoot0\paperw11906\paperh16838\margl737\margr737\margt850\margb850\headery720\footery720{\*\listtable{\list\listtemplateid19690212{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc1{\leveltext\'02\'00.;}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc3{\leveltext\'02\'01.;}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'02\'02.;}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc4{\leveltext\'02\'03);}{\levelnumbers\'01;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc2{\leveltext\'03(\'04);}{\levelnumbers\'02;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc4{\leveltext\'03(\'05);}{\levelnumbers\'02;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'03(\'06);}{\levelnumbers\'02;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'03(\'07);}{\levelnumbers\'02;}}
{\listlevel\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent360\levelnfc0{\leveltext\'03(\'08);}{\levelnumbers\'02;}}
\listid1194737}}{\*\listoverridetable{\listoverride\listid1194737\listoverridecount0\ls1}}\endnhere\sectdefaultcl{\pard{\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 6. Staging the changes\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 Goals\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 To learn to stage changes for the upcoming commits\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 01 Adding changes\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 Now command git to stage changes. Check the status\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 RUN:\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 git add hello.html\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 git status\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 You will see \'85\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 RESULT:\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 $ git add hello.html\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 $ git status\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 # On branch master\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 # Changes to be committed:\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 #   (use "git reset HEAD <file>..." to unstage)\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 #\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 #   modified:   hello.html\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 #\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 Changes to the hello.html have been staged. This means that git knows about the change, but it is not permanent in the repository. The next commit will include the changes staged.\par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 \par
\ql\li0\fi0\ri0\sb0\sl0\sa0 \plain\f0\fs20\cf0 Should you decide not to commit the change, the status command will remind you that you can use the \plain\f0\fs20\cf0\b git reset \plain\f0\fs20\cf0 command to \plain\f0\fs20\cf0 unstage\plain\f0\fs20\cf0  these changes.}}
}
<end node> 5P9i0s8y19Z
id=3538
nodeguid=C2861F2BB3FD929CBD4C113FFCB2B42783F2538F
dtch=20170203-092736
usrch=IPA
dtcr=20170203-092226
usrcr=IPA
dt=Text
<node>
07. Staging and committing
1
7. Staging and committing
A staging step in git allows you to continue making changes to the working directory, and when you decide you wanna interact with version control, it allows you to record changes in small commits.

Suppose you have edited three files (a. html, b. html, and c. html). After that you need to commit all the changes so that the changes to a. html and b. html were a single commit, while the changes to c. html were not logically associated with the first two files and were done in a separate commit.

In theory you can do the following:

git add a.html
git add b.html
git commit -m "Changes for a and b"
git add c.html
git commit -m "Unrelated change to c"
Separating staging and committing, you get the chance to easily customize what goes into a commit.

<end node> 5P9i0s8y19Z
id=3539
nodeguid=FA2C8A3DD73EE44286E351D8EE259D009BD283CB
dtch=20170203-101208
usrch=IPA
dtcr=20170203-093101
usrcr=IPA
dt=Text
<node>
08. Commiting the changes
1
8. Commiting the changes
Goals
To learn to commit to the repository
01 Committing changes
Well, enough about staging. LetТs commit the staged changes to the repository.

When you previously used git commit for committing the first hello.html version to the repository, you included the -m flag that gives a comment on the command line. The commit command allows interactively editing comments for the commit. And now, letТs see how it works.

If you omit the -m flag from the command line, git will pop you into the editor of your choice from the list (in order of priority):

GIT_EDITOR environment variable
core.editor configuration setting
VISUAL environment variable
EDITOR environment variable
I have the EDITOR variable set to emacsclient (available for Linux and Mac).

Let us commit now and check the status.

RUN:
git commit
You will see the following in your editor:

RESULT:
|
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#   modified:   hello.html
#
On the first line, enter the comment: УAdded hi tagФ. Save the file and exit the editor (to do it in default editor, press ESC and then type  :wq and hit Enter). You should see Е

RESULT:
git commit
Waiting for Emacs...
[master 569aa96] Added h1 tag
 1 files changed, 1 insertions(+), 1 deletions(-)
"Waiting for EmacsЕ" is obtained from the emacsclient program sending the file to a running emacs program and waiting for it to be closed. The rest of the data is the standard commit messages.

02 Checking the status
At the end let us check the status.

RUN:
git status
You will see Е

RESULT:
$ git status
# On branch master
nothing to commit (working directory clean)
The working directory is clean, you can continue working.
<end node> 5P9i0s8y19Z
